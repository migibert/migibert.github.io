[{"content":"Introduction Brazilian Jiu-Jitsu (BJJ) is often described as a game of human chess, where strategy, leverage, and technique play a crucial role. Observing BJJ through the lens of the Theory of Constraints, a concept from systems management, offers a perspective on how physical and biomechanical limitations shape the practice. These constraints arise due to an opponent’s actions or a practitioner\u0026rsquo;s own movements, influencing the flow of engagement on the mat.\nThe Body as a System A BJJ practitioner’s body can be viewed as a dynamic system composed of multiple interconnected elements: joints, muscles, limbs, and core stability. Like any system, the body has constraints that dictate its range of motion, strength distribution, and balance. Success in BJJ appears to depend on how well a practitioner manages their own constraints while navigating those imposed by their opponent.\nFor instance, during a guard pass, a practitioner’s ability to move freely is influenced by the constraints created by their opponent’s guard. If the opponent frames against their shoulders, locks their hips in place with grips, or uses their legs to manage distance, these constraints limit movement and require adaptations. Recognizing these bottlenecks in movement provides insight into the adjustments needed for progression.\nConstraints Imposed by the Opponent In a live BJJ exchange, both practitioners continuously apply constraints to each other. These constraints manifest in various ways, such as positional control, weight distribution, or strategic grips. Each constraint placed on an opponent alters their movement and decision-making, shaping the flow of the match.\nFor example, when a cross-face is applied from side control, the opponent’s ability to turn into the attacker is restricted. This constraint may lead to predictable reactions—perhaps framing to relieve pressure or attempting an underhook—both of which could create opportunities for further action.\nThe opponent’s system is always adapting to the imposed constraints. Observing how these constraints influence movement and decision-making may offer a better understanding of how positions and transitions develop over time.\nConstraints Are a Two-Way Street While applying a constraint limits an opponent, it also introduces limitations for the person applying it. Every action in BJJ has a consequence—if one practitioner commits both hands to controlling an opponent’s arm, they may lose the ability to base or post in case of a sweep attempt. If someone establishes a strong leg entanglement for a heel hook, their own mobility may become restricted, potentially exposing them to counterattacks.\nA classic example is the closed guard. The guard player applies a constraint by locking their legs around their opponent’s hips, limiting their ability to stand or move freely. However, this also restricts the guard player’s mobility and forces them to rely on upper-body control and angles to execute attacks. Recognizing this trade-off offers an interesting perspective on how constraints influence decision-making.\nObserving Constraints in Practice Examining BJJ through the Theory of Constraints presents an intriguing way to analyze positional control, leverage, and adaptability. Some potential areas of focus include:\nIdentifying Key Constraints: Understanding which constraints are most limiting in a given exchange can provide insight into positional dynamics. Is an opponent’s frame preventing movement? Is their posture allowing them to escape?\nNoticing Patterns: Since constraints influence movement, observing how they create predictable reactions may reveal strategic openings. If an opponent relies heavily on framing, breaking the frame might significantly alter the situation.\nRecognizing Trade-offs: Every constraint imposed also affects the person applying it. Reflecting on potential vulnerabilities could lead to better decision-making in different scenarios.\nAdapting Dynamically: Since every constraint creates a reaction, the ability to readjust and shift based on an opponent’s response seems to be an important part of BJJ.\nConclusion Brazilian Jiu-Jitsu involves a constant interplay of constraints. Viewing it through the Theory of Constraints offers a different way to think about positional control, leverage, and adaptation. Whether examining guard passing, escapes, or submissions, constraints influence every exchange. Observing how these limitations shape movement and decision-making may provide a valuable perspective on the art of BJJ.\n","permalink":"https://migibert.github.io/posts/bjj-toc/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eBrazilian Jiu-Jitsu (BJJ) is often described as a game of human chess, where strategy, leverage, and technique play a crucial role. Observing BJJ through the lens of the \u003cstrong\u003eTheory of Constraints\u003c/strong\u003e, a concept from systems management, offers a perspective on how physical and biomechanical limitations shape the practice. These constraints arise due to an opponent’s actions or a practitioner\u0026rsquo;s own movements, influencing the flow of engagement on the mat.\u003c/p\u003e","title":"Applying the Theory of Constraints to Brazilian Jiu-Jitsu"},{"content":"Introduction The Organization Decision Record (ODR) framework provides a structured approach to decision-making by clearly defining context, constraints, and requirements. However, as decision complexity increases, manually evaluating all possible options becomes impractical. Constraint Satisfaction Problems (CSP) offer a way to systematically optimize decision-making by leveraging constraint-solving algorithms.\nIn this article, we\u0026rsquo;ll explore how to convert an ODR decision into a CSP problem and implement it using Timefold, an open-source optimization engine.\nUnderstanding the Decision-Making Problem Let\u0026rsquo;s take the example from the original ODR article:\nContext Team A lacks a Product Owner (PO). Team B has a PO. Hiring externally takes time. Constraints Each team must have a PO. No PO can be assigned to more than one team. Hiring externally has a higher cost. Considered Options Fire the whole team (unrealistic but considered). Hire an external PO. Open a backfill position. Hire a contractor. Transfer an internal PO. Transfer John Doe from Team A. Transfer Jane Doe from Team B. Rather than manually scoring these options, we can formulate this as a Constraint Satisfaction Problem (CSP) and solve it with Timefold.\nDefining the CSP Model Step 1: Define Decision Variables The decision variables represent the possible assignments of a PO to Team A:\npoAssignment can take values {External, John Doe, Jane Doe, None}. Step 2: Define Constraints Using Timefold\u0026rsquo;s constraint engine, we encode:\nEach team must have a PO → A valid solution must assign a PO to Team A. No PO can be assigned twice → If Jane Doe is assigned to Team A, she cannot remain in Team B. Hiring cost minimization → Assigning an internal PO is preferred over hiring externally. Step 3: Define an Optimization Function The objective is to minimize hiring cost while ensuring every team has a PO.\nImplementing the CSP Model with Timefold @PlanningEntity public class Team { private String name; @PlanningVariable(valueRangeProviderRefs = \u0026#34;poRange\u0026#34;) private ProductOwner assignedPO; } @PlanningSolution public class ODRSolution { @PlanningEntityCollectionProperty private List\u0026lt;Team\u0026gt; teams; @ValueRangeProvider(id = \u0026#34;poRange\u0026#34;) public List\u0026lt;ProductOwner\u0026gt; getAvailablePOs() { return List.of(new ProductOwner(\u0026#34;John Doe\u0026#34;), new ProductOwner(\u0026#34;Jane Doe\u0026#34;), new ProductOwner(\u0026#34;External\u0026#34;, true)); } } public class ODRConstraintProvider implements ConstraintProvider { @Override public Constraint[] defineConstraints(ConstraintFactory factory) { return new Constraint[] { factory.forEach(Team.class) .filter(team -\u0026gt; team.getAssignedPO() == null) .penalize(\u0026#34;Each team must have a PO\u0026#34;, HardSoftScore.ONE_HARD), factory.forEachUniquePair(Team.class, Joiners.equal(Team::getAssignedPO)) .penalize(\u0026#34;No PO duplication\u0026#34;, HardSoftScore.ONE_HARD), factory.forEach(Team.class) .filter(team -\u0026gt; team.getAssignedPO() != null \u0026amp;\u0026amp; team.getAssignedPO().isExternal()) .penalize(\u0026#34;Minimize external hiring cost\u0026#34;, HardSoftScore.ONE_SOFT) }; } } Running the Solver SolverFactory\u0026lt;ODRSolution\u0026gt; solverFactory = SolverFactory.create(new SolverConfig() .withSolutionClass(ODRSolution.class) .withEntityClasses(Team.class) .withConstraintProviderClass(ODRConstraintProvider.class) .withTerminationSpentLimit(Duration.ofSeconds(10))); Solver\u0026lt;ODRSolution\u0026gt; solver = solverFactory.buildSolver(); ODRSolution bestSolution = solver.solve(initialSolution); Conclusion By formulating ODR decisions as a CSP, we can leverage constraint solvers like Timefold to automate optimal decision-making.\nThis approach scales efficiently, making it especially useful for complex organizational decisions. If you\u0026rsquo;re dealing with multiple teams, roles, or constraints, CSP-based optimization could be a game-changer!\n","permalink":"https://migibert.github.io/posts/odr-csp/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThe Organization Decision Record (ODR) framework provides a structured approach to decision-making by clearly defining context, constraints, and requirements. However, as decision complexity increases, manually evaluating all possible options becomes impractical. Constraint Satisfaction Problems (CSP) offer a way to systematically optimize decision-making by leveraging constraint-solving algorithms.\u003c/p\u003e\n\u003cp\u003eIn this article, we\u0026rsquo;ll explore how to convert an ODR decision into a CSP problem and implement it using \u003cstrong\u003eTimefold\u003c/strong\u003e, an open-source optimization engine.\u003c/p\u003e","title":"From ODR to CSP: Optimizing Decision-Making with Timefold"},{"content":"Introduction As a manager, it is often really hard to make your process for making decisions crystal clear. As well as making these decisions understood, collaborative, and integrated.\nHow often do you hear or pronounce sentences: \u0026ldquo;That decision makes no sense\u0026rdquo;, \u0026ldquo;This decision is unrealistic\u0026rdquo;, \u0026ldquo;I think you\u0026rsquo;ve missed the point\u0026rdquo; or \u0026ldquo;Isn\u0026rsquo;t this a better solution\u0026rdquo;?\nAn obscure decision-making process can only lead to confusion.\nWell, you are in the right place, let me introduce you to the ODR: Organization Decision Record.\nYou may have heard about the ADRs: Architecture Decision Records, a popular tool for capturing Architectural Decisions and their context. It has many positive side-effects: documentation, clarification, explanation\u0026hellip;\nThe ODRs are directly inspired by the ADR and Software Testing approaches.\nSounds great, how do you start? Let\u0026rsquo;s be clear: no manager makes a decision for pleasure, we have to make decisions based on context, constraints, and/or requirements. The first step is to collect all of them!\nAt this point, we are not even considering options, finding solutions, or reducing the scope of the problem. We are creating the scoring matrix for future situations that might present themselves.\nSome definitions and examples will help to understand the nature of this trio!\nContext This makes up the undeniable facts.\nFor instance:\nX Key People left the company. The Senior Incredible Partner position has not been filled for Y months. Project CrazyShark has been stuck for Z months. Company A is merging with Company B. Constraints These define things that must be achieved, whether we like it or not.\nFor instance:\nSystem Pieceofshut needs to be maintained as it is the only available payment system. A law prevents the company to hire people outside their operating footprint. Security prevents external collaborators from bringing their own devices. Requirements This defines the ideal target state we want to reach. It is usually the main reason why we open a new Decision Record.\nFor instance:\nRelease a new product for YYYY/MM/DD. Teams from each company should be mixed. Engineering Manager John Doe has only 1 team to manage. Each team needs a Product Owner. Elements from these 3 categories make the decision drivers explicit, and they are used to score the considered options afterward.\nConsidered options Once the context, constraints, and requirements are exhaustively listed you can open the document to everyone in the company!\nThat will provide transparency, open the door for feedback, and let anyone interested contribute to the decision. This\u0026rsquo;ll explicitly say that the organization needs to make a decision and these are the factors that will drive the adopted solution.\nNow, you can start to list the options. At this point, we don\u0026rsquo;t want to reduce the scope or possibilities, we still want to be as exhaustive as we can.\nA mock example to help paint a picture:\nTeam A does not have a PO anymore:\nOption 1: Fire the whole team\nOption 2: Hire an external PO\nOption 2.1: Open a backfill position Option 2.2: Hire a contractor Option 3: Transfer an internal PO\nOption 3.1: Transfer John Doe from Team A Option 3.2: Transfer Jane Doe from Team B As you can see, you\u0026rsquo;ll consider all the available options, even the most extreme ones.\nThis process is open, and anyone in the company should be able to contribute, as it would prevent us from missing some options.\nDecision drivers, considered option, now what? Now it\u0026rsquo;s time for scoring!\nThis is quite an easy step, as it\u0026rsquo;s all about creating a table to include:\nOne column for each considered option. One line for each constraint. One line for each requirement. Then each cell is checked or not. When the case is fairly simple, the table is enough to elect an option as THE SOLUTION (which will be loved or hated). The most important action is to provide clarity and comprehensive reading on the decision.\nMore complex cases could lead to adding constraints and requirements or weighting them.\nFull Example Conclusion In summary, I love this decision-making framework as it really reminds me of the software testing mindset: defining first why you do things and what are the success criteria.\nAll the different options are then considered (even the terrible and extreme ones) to finally decide, by scoring the options using the success criteria.\nIt could be used for making any decision\u0026hellip; so maybe ADR: Any Decision Record would be a better name :)\n","permalink":"https://migibert.github.io/posts/odr-intro/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eAs a manager, it is often really hard to make your process for making decisions crystal clear. As well as making these decisions understood, collaborative, and integrated.\u003c/p\u003e\n\u003cp\u003eHow often do you hear or pronounce sentences: \u0026ldquo;That decision makes no sense\u0026rdquo;, \u0026ldquo;This decision is unrealistic\u0026rdquo;, \u0026ldquo;I think you\u0026rsquo;ve missed the point\u0026rdquo; or \u0026ldquo;Isn\u0026rsquo;t this a better solution\u0026rdquo;?\u003c/p\u003e\n\u003cp\u003eAn obscure decision-making process can only lead to confusion.\u003c/p\u003e\n\u003cp\u003eWell, you are in the right place, let me introduce you to the ODR: Organization Decision Record.\u003c/p\u003e","title":"ODR: Decision-making made simple"}]